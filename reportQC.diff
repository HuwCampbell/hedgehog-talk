1c1
< module Tiny where
---
> module Report where
3a4
> import Data.Foldable (traverse_)
6d6
<
36a37,77
>
> integral :: (Random.Random i, Integral i) => i -> i -> Gen i
> integral lower upper =
>   Gen $ \seed ->
>     fst $
>       Random.randomR (lower, upper) seed
>
>
> element :: [a] -> Gen a
> element as = case as of
>   [] ->
>     error "Gen.element: used with empty list"
>   _ -> do
>     n <- integral 0 (length as - 1)
>     pure $ as !! n
>
>
> data Result
>   = Success
>   | Failure String [String]
>   deriving (Eq, Show)
>
>
> failWith :: String -> Result
> failWith r = Failure r []
>
> printResult :: Result -> IO ()
> printResult Success = putStrLn "Success"
> printResult (Failure r xx) = do
>   putStrLn "Failure"
>   putStrLn ("  " ++ r)
>   putStrLn "inputs"
>   traverse_ putStrLn xx
>
>
> addInput :: String -> Result -> Result
> addInput input (Failure r inputs) =
>   Failure r (input : inputs)
> addInput input Success = Success
>
>
39c80
<     runProperty :: Gen Bool
---
>     runProperty :: Gen (IO Result)
41a83,92
> success :: Property
> success =
>   Property $
>     pure . pure $
>       Success
>
> mapResult :: (Result -> Result) -> Property -> Property
> mapResult f prop =
>   Property $ fmap (fmap f) $ runProperty prop
>
46c97,104
<   property = Property . pure
---
>   property b =
>     let
>       result = if b then Success else failWith "falsifiable"
>     in
>       Property . pure . pure $ result
>
> instance Testable Property where
>   property = id
48c106
< instance (Arbitrary a, Testable prop) => Testable (a -> prop) where
---
> instance (Arbitrary a, Show a, Testable prop) => Testable (a -> prop) where
52c110,111
< forAll :: Testable prop => Gen a -> (a -> prop) -> Property
---
>
> forAll :: (Show a, Testable prop) => Gen a -> (a -> prop) -> Property
54,56c113,118
<   Property $
<     gen >>=
<       runProperty . property . f
---
>   Property $ do
>     a <- gen
>     runProperty $
>       mapResult (addInput (show a)) $
>         property (f a)
>
58c120
< check :: Testable prop => prop -> IO Bool
---
> check :: Testable prop => prop -> IO Result
62c124
<       return True
---
>       return Success
69,70c131,132
<         result = runGen (runProperty (property prop)) seed0
<       if result then go (i - 1) seed1 else return result
---
>       result <- runGen (runProperty (property prop)) seed0
>       if Success == result then go (i - 1) seed1 else return result
